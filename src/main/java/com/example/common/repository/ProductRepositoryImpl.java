package com.example.common.repository;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.atomic.AtomicLong;

import javax.annotation.PostConstruct;

import com.example.common.entity.SimpleProduct;

/**
 * This is a mock of the repository which will be the spring-data/jpa repository
 * 
 * @author maspen
 *
 */
public class ProductRepositoryImpl implements IProductRepository {
	// want to differentiate b/w Product.id (which will be generated by the db)
	// & the map id
	private AtomicLong productIdGenerator = new AtomicLong(1l);
	private AtomicLong productMapIdGenerator = new AtomicLong(10l);

	private Map<Long, SimpleProduct> productMap;

	@PostConstruct
	private void initProductMap() {
		productMap = new HashMap<Long, SimpleProduct>() {
			private static final long serialVersionUID = 8178843384032992327L;
			{
				put(productMapIdGenerator.getAndIncrement(), new SimpleProduct(productIdGenerator.getAndIncrement(), "one", 1, new Date()));
				put(productMapIdGenerator.getAndIncrement(), new SimpleProduct(productIdGenerator.getAndIncrement(), "two", 2, new Date()));
				put(productMapIdGenerator.getAndIncrement(), new SimpleProduct(productIdGenerator.getAndIncrement(), "three", 3, new Date()));
			}
		};
	}

	public SimpleProduct create(SimpleProduct simpleProduct) {
		System.out.println("ProductRepositoryImpl#create(simpleProduct) " + simpleProduct);
		
		// have to create a new product.id - this will be handles by db (?)
		simpleProduct.setId(productIdGenerator.getAndIncrement());
		
		// TODO: NOT verifying if simpleProduct already exists
		productMap.put(productMapIdGenerator.getAndIncrement(), simpleProduct);
		
		return simpleProduct;
	}
	
	// helper method
	private SimpleProduct getProductFromMap(Long id) {
		SimpleProduct persistedProduct = null;
		for(Entry<Long, SimpleProduct> productEntry : productMap.entrySet()) {
			if(productEntry.getValue().getId().equals(id)) {
				persistedProduct = productEntry.getValue();
				break;
			}
		}
		
		if(null == persistedProduct) {
			//System.err.println("***** Product w/ id " + id + " does NOT exist!");
			System.out.println("***** Product w/ id " + id + " does NOT exist!");
		} else {
			System.out.println("ProductRepositoryImpl@getProductFromMap found product w/ id " + id + 
					"/n" + persistedProduct.toString());
		}
		
		return persistedProduct;
	}	

	public SimpleProduct read(Long id) {
		System.out.println("ProductRepositoryImpl#read(id) " + id);
		
		return getProductFromMap(id);
	}

	public SimpleProduct update(SimpleProduct simpleProduct) {
		System.out.println("ProductRepositoryImpl#update(simpleProduct) " + simpleProduct);
		
		SimpleProduct persistedProduct = getProductFromMap(simpleProduct.getId());
		if(null == persistedProduct) {
			//System.err.println("cannot update product w/ id " + simpleProduct.getId() + " b/c it does NOT exist");
			System.out.println("cannot update product w/ id " + simpleProduct.getId() + " b/c it does NOT exist");
			return null;
		}
		
		persistedProduct.copyWithoutChangingId(simpleProduct);
		
		return persistedProduct;
	}
	
	// helper method
	private Long getProductMapKey(Long productId) {
		Long mapKey = null;
		for(Entry<Long, SimpleProduct> productEntry : productMap.entrySet()) {
			if(productEntry.getValue().getId().equals(productId)) {
				mapKey = productEntry.getKey();
				break;
			}
		}
		return mapKey;
	}	

	public void delete(Long id) {
		System.out.println("ProductRepositoryImpl#delete(id) " + id);
		
		Long mapKey = getProductMapKey(id);
		
		if(null == mapKey) {
			//System.err.println("product.id " + id + " does NOT exists so could not be deleted");
			System.out.println("product.id " + id + " does NOT exists so could not be deleted");
		}
		
		productMap.remove(mapKey);
	}

	public Map<Long, SimpleProduct> getProductMap() {
		return productMap;
	}
}
